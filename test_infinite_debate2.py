#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –¥–µ–±–∞—Ç–æ–≤
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.core.debate_manager import DebateManager


async def test_infinite_debate():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –¥–µ–±–∞—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –¥–µ–±–∞—Ç–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–±–∞—Ç–æ–≤
    debate_manager = DebateManager(mode=1)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        await debate_manager.start()
        print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–±–∞—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –¥–µ–±–∞—Ç–æ–≤
        topic = "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç: –ø–æ–ª—å–∑–∞ –∏–ª–∏ –≤—Ä–µ–¥ –¥–ª—è —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞?"
        print(f"üìù –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–±–∞—Ç—ã –Ω–∞ —Ç–µ–º—É: {topic}")
        
        await debate_manager.start_infinite_debate(topic)
        print("‚úÖ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –¥–µ–±–∞—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –¥–µ–±–∞—Ç–æ–≤
        print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥–∏ –¥–µ–±–∞—Ç–æ–≤...")
        for i in range(5):
            print(f"   –®–∞–≥ {i+1}...")
            continue_debate = await debate_manager.step_infinite_debate()
            
            if not continue_debate:
                print("‚úÖ –î–µ–±–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ø–æ —Å–æ–≥–ª–∞—Å–∏—é!")
                break
                
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
            await asyncio.sleep(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state = debate_manager.get_state_snapshot()
        print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–±–∞—Ç–æ–≤:")
        print(f"   - –¢–µ–º–∞: {state.get('topic')}")
        print(f"   - –ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–≤–æ—Ä—è—â–∏–π: {state.get('last_speaker')}")
        print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(state.get('history_tail', []))}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –¥–µ–±–∞—Ç–æ–≤
        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–±–∞—Ç—ã...")
        await debate_manager.stop_infinite_debate()
        print("‚úÖ –î–µ–±–∞—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–±–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        continue_debate = await debate_manager.step_infinite_debate()
        if not continue_debate:
            print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –¥–µ–±–∞—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        await debate_manager.stop()
        print("üîÑ –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–±–∞—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def test_agreement_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è...")
    
    debate_manager = DebateManager(mode=1)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
    response1 = "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å –≤–∞—à–µ–π —Ç–æ—á–∫–æ–π –∑—Ä–µ–Ω–∏—è. –í—ã –ø—Ä–∞–≤—ã –≤ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å."
    response2 = "–°–æ–≥–ª–∞—Å–µ–Ω —Å –≤–∞–º–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è
    agreement = debate_manager._check_agreement(response1, response2)
    print(f"   –û—Ç–≤–µ—Ç 1: {response1}")
    print(f"   –û—Ç–≤–µ—Ç 2: {response2}")
    print(f"   –°–æ–≥–ª–∞—Å–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {agreement}")
    
    # –¢–µ—Å—Ç —Å –Ω–µ—Å–æ–≥–ª–∞—Å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
    response3 = "–Ø –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å –≤–∞—à–µ–π –ø–æ–∑–∏—Ü–∏–µ–π. –≠—Ç–æ —Å–ø–æ—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å."
    response4 = "–£ –º–µ–Ω—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ –º–Ω–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É."
    
    agreement2 = debate_manager._check_agreement(response3, response4)
    print(f"   –û—Ç–≤–µ—Ç 3: {response3}")
    print(f"   –û—Ç–≤–µ—Ç 4: {response4}")
    print(f"   –°–æ–≥–ª–∞—Å–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {agreement2}")


async def test_uniqueness_check():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏...")
    
    debate_manager = DebateManager(mode=1)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
    response1 = "–≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è."
    response2 = "–≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è."  # –î—É–±–ª–∏–∫–∞—Ç
    response3 = "–£ –º–µ–Ω—è –µ—Å—Ç—å –¥—Ä—É–≥–æ–µ –º–Ω–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É."
    
    recent_responses = set()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    unique1 = debate_manager._is_response_unique(response1, recent_responses)
    print(f"   –û—Ç–≤–µ—Ç 1 —É–Ω–∏–∫–∞–ª–µ–Ω: {unique1}")
    
    if unique1:
        recent_responses.add(debate_manager._normalize_text(response1))
    
    unique2 = debate_manager._is_response_unique(response2, recent_responses)
    print(f"   –û—Ç–≤–µ—Ç 2 (–¥—É–±–ª–∏–∫–∞—Ç) —É–Ω–∏–∫–∞–ª–µ–Ω: {unique2}")
    
    unique3 = debate_manager._is_response_unique(response3, recent_responses)
    print(f"   –û—Ç–≤–µ—Ç 3 —É–Ω–∏–∫–∞–ª–µ–Ω: {unique3}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –¥–µ–±–∞—Ç–æ–≤\n")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è
    await test_agreement_detection()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    await test_uniqueness_check()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –¥–µ–±–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç–∞–º)
    print("\n" + "="*50)
    print("‚ö†Ô∏è  –°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç–∞–º LM Studio")
    print("   –ï—Å–ª–∏ –±–æ—Ç—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã, —Ç–µ—Å—Ç –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –æ—à–∏–±–∫–æ–π")
    print("="*50)
    
    try:
        await test_infinite_debate()
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –¥–µ–±–∞—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–µ–ª (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã): {e}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(main())
