#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –¥–µ–±–∞—Ç–æ–≤
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from core.debate_manager import DebateManager

async def test_infinite_debate():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –¥–µ–±–∞—Ç–æ–≤"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –¥–µ–±–∞—Ç–æ–≤")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–±–∞—Ç–æ–≤
    manager = DebateManager(mode=1)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        await manager.start()
        print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–±–∞—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ–º—ã
        test_topics = [
            "–ü–æ–ª—å–∑–∞ –∏ –≤—Ä–µ–¥ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π",
            "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç: —É–≥—Ä–æ–∑–∞ –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å",
            "–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ vs —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
        ]
        
        for i, topic in enumerate(test_topics, 1):
            print(f"\nüìù –¢–µ—Å—Ç {i}: {topic}")
            print("-" * 40)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –¥–µ–±–∞—Ç—ã
            await manager.start_infinite_debate(topic)
            print(f"‚úÖ –î–µ–±–∞—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã –Ω–∞ —Ç–µ–º—É: {topic}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –¥–µ–±–∞—Ç–æ–≤
            step_count = 0
            max_steps = 10  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
            
            while step_count < max_steps:
                step_count += 1
                print(f"\nüîÑ –®–∞–≥ {step_count}:")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥ –¥–µ–±–∞—Ç–æ–≤
                continue_debate = await manager.step_infinite_debate()
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                state = manager.state_mode1
                
                if not continue_debate:
                    print("‚úÖ –î–µ–±–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
                    break
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
                if state.history:
                    last_message = state.history[-1]
                    if last_message.get("role") == "assistant":
                        speaker = last_message.get("name", "Unknown")
                        content = last_message.get("content", "")
                        print(f"üí¨ {speaker}: {content[:100]}...")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                        relevance = manager._check_topic_relevance(content)
                        print(f"üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance:.2f}")
                        
                        if len(state.history) > 1:
                            prev_message = state.history[-2]
                            if prev_message.get("role") == "assistant":
                                coherence = manager._check_conversation_coherence(
                                    content, prev_message.get("content", "")
                                )
                                print(f"üìä –°–≤—è–∑–Ω–æ—Å—Ç—å: {coherence:.2f}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
                await asyncio.sleep(1)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–±–∞—Ç—ã
            await manager.stop_infinite_debate()
            print(f"‚èπÔ∏è –î–µ–±–∞—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ {step_count} —à–∞–≥–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            assistant_messages = [msg for msg in state.history if msg.get("role") == "assistant"]
            print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   - –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {len(assistant_messages)}")
            print(f"   - –°–æ–≥–ª–∞—Å–∏–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ: {state.agreement_reached}")
            print(f"   - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏: {state.conversation_coherence:.2f}")
            print(f"   - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ç–µ–º—ã: {list(state.topic_keywords)}")
            
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
            await manager.clear_history()
            print("üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            await asyncio.sleep(2)
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        await manager.stop()
        print("üõë –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–±–∞—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def test_agreement_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è"""
    
    print("\nüîç –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è")
    print("=" * 40)
    
    manager = DebateManager(mode=1)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤
    test_pairs = [
        # –°–æ–≥–ª–∞—Å–∏–µ
        (
            "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å –≤–∞—à–µ–π —Ç–æ—á–∫–æ–π –∑—Ä–µ–Ω–∏—è. –í–∞—à–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã.",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –ø—Ä–∏—à–ª–∏ –∫ –æ–±—â–µ–º—É –º–Ω–µ–Ω–∏—é."
        ),
        # –ù–µ—Å–æ–≥–ª–∞—Å–∏–µ
        (
            "–Ø –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å –≤–∞—à–∏–º–∏ –¥–æ–≤–æ–¥–∞–º–∏. –£ –º–µ–Ω—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ –º–Ω–µ–Ω–∏–µ.",
            "–Ø —Ç–∞–∫–∂–µ –Ω–µ —Ä–∞–∑–¥–µ–ª—è—é –≤–∞—à—É –ø–æ–∑–∏—Ü–∏—é. –ú—ã –æ—Å—Ç–∞–µ–º—Å—è –ø—Ä–∏ —Å–≤–æ–∏—Ö –º–Ω–µ–Ω–∏—è—Ö."
        ),
        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ
        (
            "–í —Ü–µ–ª–æ–º —è —Å–æ–≥–ª–∞—Å–µ–Ω, –Ω–æ –µ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω—é–∞–Ω—Å—ã.",
            "–î–∞, –≤—ã –ø—Ä–∞–≤—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º, –Ω–æ –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å –¥–µ—Ç–∞–ª–∏."
        ),
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–±–∞—Ç–æ–≤
        (
            "–ü—Ä–∏—à–ª–∏ –∫ —Å–æ–≥–ª–∞—Å–∏—é –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.",
            "–î–∞, –º—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞. –î–µ–±–∞—Ç—ã –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∞—Ç—å."
        )
    ]
    
    for i, (response1, response2) in enumerate(test_pairs, 1):
        agreement = manager._check_agreement(response1, response2)
        print(f"–¢–µ—Å—Ç {i}: {'‚úÖ –°–æ–≥–ª–∞—Å–∏–µ' if agreement else '‚ùå –ù–µ—Å–æ–≥–ª–∞—Å–∏–µ'}")
        print(f"   –û—Ç–≤–µ—Ç 1: {response1}")
        print(f"   –û—Ç–≤–µ—Ç 2: {response2}")
        print()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(test_infinite_debate())
    asyncio.run(test_agreement_detection())
